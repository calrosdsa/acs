				// if len(times) >= (j+3) && types[j+2] == MarcacionSalida {

				// 	if len(times) >= (j+4) && types[j+3] == MarcacionSalida {

				// 		start, err := getDateTime(times[j], "2006-01-02 15:04:05")
				// 		if err != nil {
				// 			log.Println("Fail parse", err)
				// 		}
				// 		end, err := getDateTime(times[j+3], "2006-01-02 15:04:05")
				// 		if err != nil {
				// 			log.Println("Fail parse", err)
				// 		}
				// 		diff := end.Sub(start)
				// 		res.HorasTrabajadas = append(res.HorasTrabajadas, diff)
				// 		if len(res.HorasTrabajadas) > maxTurnos {
				// 			maxTurnos = len(res.Horario)
				// 		}
				// 		th, thw, retraso := checkWorkedHours(res.Horario, start, end, currentT)
				// 		res.Retraso += retraso
				// 		res.Total = th
				// 		res.TotalHrsWorked += thw
				// 		j += 3

				// 	} else {
				// 		start, err := getDateTime(times[j], "2006-01-02 15:04:05")
				// 		if err != nil {
				// 			log.Println("Fail parse", err)
				// 		}
				// 		end, err := getDateTime(times[j+2], "2006-01-02 15:04:05")
				// 		if err != nil {
				// 			log.Println("Fail parse", err)
				// 		}
				// 		diff := end.Sub(start)
				// 		res.HorasTrabajadas = append(res.HorasTrabajadas, diff)
				// 		if len(res.HorasTrabajadas) > maxTurnos {
				// 			maxTurnos = len(res.Horario)
				// 		}
				// 		th, thw, retraso := checkWorkedHours(res.Horario, start, end, currentT)
				// 		res.Retraso += retraso
				// 		res.Total = th
				// 		res.TotalHrsWorked += thw
				// 		j += 2
				// 	}

				// } else {
				// 	start, err := getDateTime(times[j], "2006-01-02 15:04:05")
				// 	if err != nil {
				// 		log.Println("Fail parse", err)
				// 	}
				// 	end, err := getDateTime(times[j+1], "2006-01-02 15:04:05")
				// 	if err != nil {
				// 		log.Println("Fail parse", err)
				// 	}
				// 	diff := end.Sub(start)
				// 	res.HorasTrabajadas = append(res.HorasTrabajadas, diff)
				// 	if len(res.HorasTrabajadas) > maxTurnos {
				// 		maxTurnos = len(res.Horario)
				// 	}
				// 	th, thw, retraso := checkWorkedHours(res.Horario, start, end, currentT)
				// 	res.Retraso += retraso
				// 	res.Total = th
				// 	res.TotalHrsWorked += thw
				// 	j++

				// }